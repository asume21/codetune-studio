import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface Vulnerability {
  type: string;
  severity: "critical" | "high" | "medium" | "low";
  line: number;
  description: string;
  recommendation: string;
}

interface ScanResult {
  vulnerabilities: Vulnerability[];
  securityScore: number;
  summary: string;
}

export default function VulnerabilityScanner() {
  const [language, setLanguage] = useState("javascript");
  const [code, setCode] = useState(`// Example vulnerable code
const express = require('express');
const app = express();

app.get('/user/:id', (req, res) => {
    const userId = req.params.id;
    // SQL Injection vulnerability
    const query = \`SELECT * FROM users WHERE id = '\${userId}'\`;
    
    // XSS vulnerability
    res.send(\`<h1>Welcome user \${userId}</h1>\`);
});

// Hardcoded credentials
const API_KEY = "sk-1234567890abcdef";

app.listen(3000);`);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);

  const { toast } = useToast();

  const scanMutation = useMutation({
    mutationFn: async (data: { code: string; language: string }) => {
      const response = await apiRequest("POST", "/api/security/scan", data);
      return response.json();
    },
    onSuccess: (data) => {
      setScanResult(data.results);
      toast({
        title: "Scan Complete",
        description: `Found ${data.results.vulnerabilities.length} potential issues.`,
      });
    },
    onError: () => {
      toast({
        title: "Scan Failed",
        description: "Failed to scan code for vulnerabilities. Please try again.",
        variant: "destructive",
      });
    },
  });

  const { data: scans } = useQuery({
    queryKey: ["/api/security/scans"],
  });

  const handleScan = () => {
    if (!code.trim()) {
      toast({
        title: "No Code Provided",
        description: "Please enter some code to scan.",
        variant: "destructive",
      });
      return;
    }

    scanMutation.mutate({ code, language });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-600";
      case "high":
        return "bg-orange-500";
      case "medium":
        return "bg-yellow-500";
      case "low":
        return "bg-green-500";
      default:
        return "bg-gray-500";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return "fas fa-skull";
      case "high":
        return "fas fa-exclamation-triangle";
      case "medium":
        return "fas fa-exclamation";
      case "low":
        return "fas fa-info-circle";
      default:
        return "fas fa-question";
    }
  };

  const languages = [
    { value: "javascript", label: "JavaScript" },
    { value: "python", label: "Python" },
    { value: "java", label: "Java" },
    { value: "php", label: "PHP" },
    { value: "cpp", label: "C++" },
  ];

  return (
    <div className="h-full p-6 flex flex-col space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-heading font-bold">Code Vulnerability Scanner</h2>
        <div className="flex items-center space-x-4">
          <Select value={language} onValueChange={setLanguage}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {languages.map((lang) => (
                <SelectItem key={lang.value} value={lang.value}>
                  {lang.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          
          <Button
            onClick={handleScan}
            disabled={scanMutation.isPending}
            className="bg-studio-accent hover:bg-blue-500"
          >
            {scanMutation.isPending ? (
              <>
                <i className="fas fa-spinner animate-spin mr-2"></i>
                Scanning...
              </>
            ) : (
              <>
                <i className="fas fa-search mr-2"></i>
                Scan Code
              </>
            )}
          </Button>
          
          <Button variant="secondary" className="bg-gray-700 hover:bg-gray-600">
            <i className="fas fa-download mr-2"></i>Export Report
          </Button>
        </div>
      </div>
      
      {/* Security Overview */}
      {scanResult && (
        <div className="grid grid-cols-4 gap-4">
          <div className="bg-studio-panel border border-gray-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-2xl font-bold text-red-400">
                  {scanResult.vulnerabilities.filter(v => v.severity === "critical").length}
                </div>
                <div className="text-sm text-gray-400">Critical</div>
              </div>
              <i className="fas fa-exclamation-triangle text-red-400 text-xl"></i>
            </div>
          </div>
          <div className="bg-studio-panel border border-gray-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-2xl font-bold text-orange-400">
                  {scanResult.vulnerabilities.filter(v => v.severity === "high").length}
                </div>
                <div className="text-sm text-gray-400">High</div>
              </div>
              <i className="fas fa-exclamation-circle text-orange-400 text-xl"></i>
            </div>
          </div>
          <div className="bg-studio-panel border border-gray-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-2xl font-bold text-yellow-400">
                  {scanResult.vulnerabilities.filter(v => v.severity === "medium").length}
                </div>
                <div className="text-sm text-gray-400">Medium</div>
              </div>
              <i className="fas fa-exclamation text-yellow-400 text-xl"></i>
            </div>
          </div>
          <div className="bg-studio-panel border border-gray-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-2xl font-bold text-green-400">
                  {scanResult.vulnerabilities.filter(v => v.severity === "low").length}
                </div>
                <div className="text-sm text-gray-400">Low</div>
              </div>
              <i className="fas fa-info-circle text-green-400 text-xl"></i>
            </div>
          </div>
        </div>
      )}
      
      <div className="flex-1 grid grid-cols-4 gap-6">
        {/* Code Editor */}
        <div className="col-span-2 flex flex-col space-y-4">
          <h3 className="font-medium">Code to Scan</h3>
          <Textarea
            value={code}
            onChange={(e) => setCode(e.target.value)}
            className="flex-1 bg-studio-panel border-gray-600 font-mono text-sm resize-none"
            placeholder="Paste your code here to scan for vulnerabilities..."
          />
        </div>
        
        {/* Vulnerability List */}
        <div className="bg-studio-panel border border-gray-600 rounded-lg p-4">
          <h3 className="font-medium mb-4">Detected Vulnerabilities</h3>
          <ScrollArea className="h-96">
            {scanResult ? (
              <div className="space-y-3">
                {scanResult.vulnerabilities.map((vuln, index) => (
                  <div key={index} className={`vulnerability-item vulnerability-${vuln.severity} rounded-lg p-3`}>
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <i className={`${getSeverityIcon(vuln.severity)} text-white`}></i>
                        <span className={`text-xs px-2 py-1 rounded font-bold ${getSeverityColor(vuln.severity)} text-white`}>
                          {vuln.severity.toUpperCase()}
                        </span>
                      </div>
                      <span className="text-xs text-gray-300">Line {vuln.line}</span>
                    </div>
                    <h4 className="font-medium text-white mb-1">{vuln.type}</h4>
                    <p className="text-sm text-gray-200 mb-2">{vuln.description}</p>
                    <p className="text-xs text-gray-300">{vuln.recommendation}</p>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex items-center justify-center h-full text-gray-400">
                <div className="text-center">
                  <i className="fas fa-shield-alt text-4xl mb-4"></i>
                  <p>Scan results will appear here</p>
                </div>
              </div>
            )}
          </ScrollArea>
        </div>
        
        {/* Security Recommendations */}
        <div className="bg-studio-panel border border-gray-600 rounded-lg p-4">
          <h3 className="font-medium mb-4">AI Recommendations</h3>
          <div className="space-y-4 text-sm">
            <div className="p-3 bg-red-900 bg-opacity-30 border border-red-600 rounded">
              <div className="font-medium text-red-400 mb-2">Immediate Action Required</div>
              <ul className="space-y-1 text-gray-300">
                <li>• Implement parameterized queries</li>
                <li>• Add output escaping for XSS protection</li>
                <li>• Remove hardcoded credentials</li>
              </ul>
            </div>
            
            <div className="p-3 bg-yellow-900 bg-opacity-30 border border-yellow-600 rounded">
              <div className="font-medium text-yellow-400 mb-2">Security Improvements</div>
              <ul className="space-y-1 text-gray-300">
                <li>• Upgrade to bcrypt for passwords</li>
                <li>• Implement CSRF protection</li>
                <li>• Add rate limiting</li>
              </ul>
            </div>
            
            <div className="p-3 bg-blue-900 bg-opacity-30 border border-blue-600 rounded">
              <div className="font-medium text-blue-400 mb-2">Best Practices</div>
              <ul className="space-y-1 text-gray-300">
                <li>• Enable security headers</li>
                <li>• Regular dependency updates</li>
                <li>• Implement logging & monitoring</li>
              </ul>
            </div>
            
            <Button className="w-full bg-studio-accent hover:bg-blue-500">
              <i className="fas fa-magic mr-2"></i>Auto-Fix Issues
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
